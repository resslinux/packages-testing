# Maintainer: Luchesar V. ILIEV <luchesar%2eiliev%40gmail%2ecom>
# Contributor: Anders Bergh <anders@archlinuxppc.org>
# Contributor: Armin K. <krejzi at email dot com>
# Contributor: Christian Babeux <christian.babeux@0x80.ca>
# Contributor: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Roberto Alsina <ralsina@kde.org>
# Contributor: Thomas Dziedzic < gostrc at gmail >
# Contributor: Tomas Lindquist Olsen <tomas@famolsen.dk>
# Contributor: Tomas Wilhelmsson <tomas.wilhelmsson@gmail.com>

pkgbase=llvm
pkgname=('clang')
pkgver=5.0.0svn_r292097
pkgrel=1
arch=('x86_64')
url='http://llvm.org/'
license=('custom:University of Illinois')
makedepends=('cmake' 'libffi' 'binutils')
options=('staticlibs' '!strip')
source=(llvm::git+https://git.llvm.org/git/llvm.git
        clang::git+https://git.llvm.org/git/clang.git
        musl.patch)
sha256sums=('SKIP'
            'SKIP'
            'SKIP')

# Install the license file for a package
# Arguments: NONE
_install_license() {
    install -D -m 0644 "${srcdir}/${pkgbase}/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

#
# END INTERNAL VARIABLES AND FUNCTIONS
#

#pkgver() {
#    cd "${srcdir}/${pkgbase}"

    # This will almost match the output of `llvm-config --version` when the
    # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
    # dash being replaced with underscore because of Pacman requirements.
    #echo $(awk -F 'MAJOR |MINOR |PATCH |SUFFIX |)' \
    #        'BEGIN { ORS="." ; i=0 } \
    #         /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
    #         END { print "\n" }' \
    #    CMakeLists.txt)_r$(svnversion | tr -d [A-z])
#}

prepare() {
    cd "${srcdir}/${pkgbase}"
    
    patch -Np1 -i "${srcdir}/musl.patch"
    
    if [ ! -d "${srcdir}/${pkgbase}/tools/clang" ]; then
      ln -sf "${srcdir}/clang" ${srcdir}/${pkgbase}/tools/clang
    fi

    mkdir -p "${srcdir}/build"
    
	cd "${srcdir}/build"
	
    cmake -G 'Ninja' -Wno-dev \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_VERBOSE_MAKEFILE=NO \
		-DLLVM_BINUTILS_INCDIR=/usr/include \
		-DLLVM_BUILD_DOCS=YES \
		-DLLVM_BUILD_EXAMPLES=NO \
		-DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=ON \
		-DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
		-DLLVM_BUILD_TESTS=YES \
		-DLLVM_DEFAULT_TARGET_TRIPLE=$CHOST \
		-DLLVM_ENABLE_ASSERTIONS=NO \
		-DLLVM_ENABLE_CXX1Y=YES \
		-DLLVM_ENABLE_FFI=NO \
		-DLLVM_ENABLE_LIBCXX=NO \
		-DLLVM_ENABLE_PIC=YES \
		-DLLVM_ENABLE_RTTI=YES \
		-DLLVM_ENABLE_SPHINX=NO \
		-DLLVM_ENABLE_TERMINFO=YES \
		-DLLVM_ENABLE_ZLIB=YES \
		-DLLVM_HOST_TRIPLE=$CHOST \
		-DLLVM_INCLUDE_EXAMPLES=NO \
		-DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
		-DLLVM_TARGETS_TO_BUILD=X86 \
        "../${pkgbase}"
}

build() {
    cd "${srcdir}/build"
    
    ninja
}

package(){
  echo package
}

package_llvm() {
    pkgdesc='The LLVM Compiler Infrastructure'
    depends=("llvm-libs")
    #groups=('llvm-toolchain-svn')
    #provides=('llvm')
    #replaces=('llvm')
    #conflicts=('llvm')

    cd "${srcdir}/build"

    # Exclude the clang directory, since it'll be installed in a separate package
    sed -i \
        "s|^\([[:blank:]]*include(\"${srcdir}/build/tools/clang/cmake_install.cmake\")\)$|#\1|" \
        tools/cmake_install.cmake

    DESTDIR="${pkgdir}" ninja install

    # The runtime libraries get installed in llvm-libs-svn
    rm -f "${pkgdir}"/usr/lib/lib{LLVM,LTO}{,-*}.so{,.*}
    mv -f "${pkgdir}"/usr/lib/{BugpointPasses,LLVMgold}.so "${srcdir}/"

    # Clang libraries and OCaml bindings go to separate packages
    rm -rf "${srcdir}"/{clang,ocaml.{doc,lib}}
    #mv "${pkgdir}/usr/lib/clang" "${srcdir}/clang"
    #mv "${pkgdir}/usr/lib/ocaml" "${srcdir}/ocaml.lib"
    #mv "${pkgdir}/usr/share/doc/llvm/ocaml-html" "${srcdir}/ocaml.doc"

    # Get rid of example Hello transformation
    rm -f "${pkgdir}"/usr/lib/*LLVMHello.*

    #if [[ "${CARCH}" == "x86_64" ]]; then
        # Needed for multilib (https://bugs.archlinux.org/task/29951)
        # Header stubs are taken from Fedora
    #    mv "${pkgdir}/usr/include/llvm/Config/llvm-config"{,-64}.h
    #    cp "${srcdir}/llvm-Config-llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
    #fi

    # Clean up documentation
    rm -rf "${pkgdir}/usr/share/doc/llvm/html/_sources"

    _install_python_bindings "${srcdir}/llvm/bindings/python/llvm"

    _install_license
}

package_llvm-libs() {
    pkgdesc='The LLVM Compiler Infrastructure (runtime libraries)'
    #depends=(
    #    'libffi'
    #    'zlib'
    #)
    #groups=('llvm-toolchain-svn')
    #provides=('llvm-libs')
    #replaces=('llvm-libs')
    #conflicts=('llvm-libs')

    cd "${srcdir}/build"

    DESTDIR="${pkgdir}" ninja install-{LLVM,LTO}

    # Moved from the llvm-svn package here
    mv "${srcdir}"/{BugpointPasses,LLVMgold}.so "${pkgdir}/usr/lib/"

    # Ref: http://llvm.org/docs/GoldPlugin.html
    install -m755 -d "${pkgdir}/usr/lib/bfd-plugins"
    ln -s {/usr/lib,"${pkgdir}/usr/lib/bfd-plugins"}/LLVMgold.so

    # Since r262066 lto.h is also installed, but we don't need it in the -libs package.
    rm -rf "${pkgdir}/usr/include"

    # Must have a symlink that corresponds to the output of `llvm-config --version`.
    # Without it, some builds, e.g. Mesa, might fail for "lack of shared libraries".
    _sover="$(echo ${pkgver} | cut -d . -f -2)svn"
    # libLLVM.so.3.8.0svn-r123456
    ln -s "libLLVM-${_sover}.so" "${pkgdir}/usr/lib/libLLVM.so.$(echo ${pkgver} | tr _ -)"
    # libLLVM-3.8.0svn-r123456.so
    ln -s "libLLVM-${_sover}.so" "${pkgdir}/usr/lib/libLLVM-$(echo ${pkgver} | tr _ -).so"

    _install_license
}

package_clang() {
    pkgdesc='C language family frontend for LLVM'
    url='http://clang.llvm.org/'
    depends=("llvm")
    optdepends=(
        'clang-analyzer-svn: source code analysis for Clang, supporting C, C++, and Objective-C'
        'clang-compiler-rt-svn: sanitizer runtimes, builtins, profile library and BlocksRuntime'
        'clang-tools-extra-svn: standalone tools: syntax checking, formatting, refactoring, etc.'
        'python2: git-clang-format and clang-format-diff.py support'
    )
    #groups=('llvm-toolchain-svn')
    #provides=('clang')
    #replaces=('clang')
    #conflicts=('clang')

    cd "${srcdir}/build/tools/clang"

    # Exclude the extra directory, since it'll be installed in a separate package
    sed -i \
        "s|^\([[:blank:]]*include(\"${srcdir}/build/tools/clang/tools/extra/cmake_install.cmake\")\)$|#\1|" \
        tools/cmake_install.cmake

    DESTDIR="${pkgdir}" ninja install

    # The Clang Static Analyzer is installed in a separate package
    # TODO: Probably there's more elegant way to achieve this.

    rm -rf "${srcdir}/clang-analyzer.tmp"

    install -m 0755 -d \
        "${srcdir}/clang-analyzer.tmp/usr/bin" \
        "${srcdir}/clang-analyzer.tmp/usr/share/man/man1" \
        "${srcdir}/clang-analyzer.tmp/usr/share/scan-build" \
        "${srcdir}/clang-analyzer.tmp/usr/share/scan-view"

    mv \
        "${pkgdir}/usr/bin/scan-build" \
        "${pkgdir}/usr/bin/scan-view" \
        "${pkgdir}/usr/libexec/c++-analyzer" \
        "${pkgdir}/usr/libexec/ccc-analyzer" \
        \
        "${srcdir}/clang-analyzer.tmp/usr/bin/"

    mv \
        "${pkgdir}/usr/share/man/man1/scan-build.1" \
        \
        "${srcdir}/clang-analyzer.tmp/usr/share/man/man1/"

    mv \
        "${pkgdir}/usr/share/scan-build/scanview.css" \
        "${pkgdir}/usr/share/scan-build/sorttable.js" \
        \
        "${srcdir}/clang-analyzer.tmp/usr/share/scan-build/"

    mv \
        "${pkgdir}/usr/share/scan-view/FileRadar.scpt" \
        "${pkgdir}/usr/share/scan-view/GetRadarVersion.scpt" \
        "${pkgdir}/usr/share/scan-view/Reporter.py" \
        "${pkgdir}/usr/share/scan-view/ScanView.py" \
        "${pkgdir}/usr/share/scan-view/bugcatcher.ico" \
        "${pkgdir}/usr/share/scan-view/startfile.py" \
        \
        "${srcdir}/clang-analyzer.tmp/usr/share/scan-view/"

    rmdir \
        "${pkgdir}/usr/libexec" \
        "${pkgdir}/usr/share/scan-build" \
        "${pkgdir}/usr/share/scan-view"

    # Clean up documentation
    #rm -r "${pkgdir}/usr/share/doc/clang/html/_sources"

    _fix_python_exec_path \
        "${pkgdir}/usr/bin/git-clang-format" \
        "${pkgdir}/usr/share/clang/clang-format-diff.py"

    _install_python_bindings "${srcdir}/llvm/tools/clang/bindings/python/clang"

    _install_license
}

# vim:set ts=4 sts=4 sw=4 et:
